// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `DistributedSharedLock.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.yonyou.mcloud.service.lock;

public final class DistributedSharedLockPrxHelper extends Ice.ObjectPrxHelperBase implements DistributedSharedLockPrx
{
    private static final String __lock_name = "lock";

    public void lock()
    {
        lock(null, false);
    }

    public void lock(java.util.Map<String, String> __ctx)
    {
        lock(__ctx, true);
    }

    private void lock(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_lock(begin_lock(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_lock()
    {
        return begin_lock(null, false, false, null);
    }

    public Ice.AsyncResult begin_lock(java.util.Map<String, String> __ctx)
    {
        return begin_lock(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_lock(Ice.Callback __cb)
    {
        return begin_lock(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_lock(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lock(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_lock(Callback_DistributedSharedLock_lock __cb)
    {
        return begin_lock(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_lock(java.util.Map<String, String> __ctx, Callback_DistributedSharedLock_lock __cb)
    {
        return begin_lock(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_lock(IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_lock(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_lock(IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_lock(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_lock(java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_lock(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_lock(java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_lock(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_lock(java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_lock(__ctx, 
                          __explicitCtx, 
                          __synchronous, 
                          new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_lock(java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__lock_name, __cb);
        try
        {
            __result.prepare(__lock_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_lock(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __lock_name);
    }

    private static final String __tryLock_name = "tryLock";

    public boolean tryLock()
    {
        return tryLock(null, false);
    }

    public boolean tryLock(java.util.Map<String, String> __ctx)
    {
        return tryLock(__ctx, true);
    }

    private boolean tryLock(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__tryLock_name);
        return end_tryLock(begin_tryLock(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_tryLock()
    {
        return begin_tryLock(null, false, false, null);
    }

    public Ice.AsyncResult begin_tryLock(java.util.Map<String, String> __ctx)
    {
        return begin_tryLock(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_tryLock(Ice.Callback __cb)
    {
        return begin_tryLock(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_tryLock(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_tryLock(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_tryLock(Callback_DistributedSharedLock_tryLock __cb)
    {
        return begin_tryLock(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_tryLock(java.util.Map<String, String> __ctx, Callback_DistributedSharedLock_tryLock __cb)
    {
        return begin_tryLock(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_tryLock(IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_tryLock(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_tryLock(IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_tryLock(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_tryLock(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_tryLock(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_tryLock(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_tryLock(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_tryLock(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_BoolCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_tryLock(__ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         DistributedSharedLockPrxHelper.__tryLock_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_tryLock(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__tryLock_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__tryLock_name, __cb);
        try
        {
            __result.prepare(__tryLock_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_tryLock(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __tryLock_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __tryLock_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        DistributedSharedLockPrx __proxy = (DistributedSharedLockPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_tryLock(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __tryLockInTime_name = "tryLockInTime";

    public boolean tryLockInTime(long ms)
        throws LockException
    {
        return tryLockInTime(ms, null, false);
    }

    public boolean tryLockInTime(long ms, java.util.Map<String, String> __ctx)
        throws LockException
    {
        return tryLockInTime(ms, __ctx, true);
    }

    private boolean tryLockInTime(long ms, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws LockException
    {
        __checkTwowayOnly(__tryLockInTime_name);
        return end_tryLockInTime(begin_tryLockInTime(ms, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_tryLockInTime(long ms)
    {
        return begin_tryLockInTime(ms, null, false, false, null);
    }

    public Ice.AsyncResult begin_tryLockInTime(long ms, java.util.Map<String, String> __ctx)
    {
        return begin_tryLockInTime(ms, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_tryLockInTime(long ms, Ice.Callback __cb)
    {
        return begin_tryLockInTime(ms, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_tryLockInTime(long ms, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_tryLockInTime(ms, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_tryLockInTime(long ms, Callback_DistributedSharedLock_tryLockInTime __cb)
    {
        return begin_tryLockInTime(ms, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_tryLockInTime(long ms, java.util.Map<String, String> __ctx, Callback_DistributedSharedLock_tryLockInTime __cb)
    {
        return begin_tryLockInTime(ms, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_tryLockInTime(long ms, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_tryLockInTime(ms, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_tryLockInTime(long ms, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_tryLockInTime(ms, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_tryLockInTime(long ms, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_tryLockInTime(ms, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_tryLockInTime(long ms, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_tryLockInTime(ms, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_tryLockInTime(long ms, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_BoolCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_tryLockInTime(ms, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackBoolUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               DistributedSharedLockPrxHelper.__tryLockInTime_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_tryLockInTime(long ms, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__tryLockInTime_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__tryLockInTime_name, __cb);
        try
        {
            __result.prepare(__tryLockInTime_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(ms);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_tryLockInTime(Ice.AsyncResult __iresult)
        throws LockException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __tryLockInTime_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(LockException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __tryLockInTime_completed(Ice.TwowayCallbackBoolUE __cb, Ice.AsyncResult __result)
    {
        DistributedSharedLockPrx __proxy = (DistributedSharedLockPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_tryLockInTime(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __unlock_name = "unlock";

    public void unlock()
    {
        unlock(null, false);
    }

    public void unlock(java.util.Map<String, String> __ctx)
    {
        unlock(__ctx, true);
    }

    private void unlock(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_unlock(begin_unlock(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_unlock()
    {
        return begin_unlock(null, false, false, null);
    }

    public Ice.AsyncResult begin_unlock(java.util.Map<String, String> __ctx)
    {
        return begin_unlock(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_unlock(Ice.Callback __cb)
    {
        return begin_unlock(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_unlock(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unlock(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_unlock(Callback_DistributedSharedLock_unlock __cb)
    {
        return begin_unlock(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_unlock(java.util.Map<String, String> __ctx, Callback_DistributedSharedLock_unlock __cb)
    {
        return begin_unlock(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_unlock(IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_unlock(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_unlock(IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_unlock(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_unlock(java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_unlock(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_unlock(java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_unlock(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_unlock(java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_unlock(__ctx, 
                            __explicitCtx, 
                            __synchronous, 
                            new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_unlock(java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__unlock_name, __cb);
        try
        {
            __result.prepare(__unlock_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_unlock(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __unlock_name);
    }

    public static DistributedSharedLockPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), DistributedSharedLockPrx.class, DistributedSharedLockPrxHelper.class);
    }

    public static DistributedSharedLockPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), DistributedSharedLockPrx.class, DistributedSharedLockPrxHelper.class);
    }

    public static DistributedSharedLockPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), DistributedSharedLockPrx.class, DistributedSharedLockPrxHelper.class);
    }

    public static DistributedSharedLockPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), DistributedSharedLockPrx.class, DistributedSharedLockPrxHelper.class);
    }

    public static DistributedSharedLockPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, DistributedSharedLockPrx.class, DistributedSharedLockPrxHelper.class);
    }

    public static DistributedSharedLockPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, DistributedSharedLockPrx.class, DistributedSharedLockPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::lock::DistributedSharedLock"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, DistributedSharedLockPrx v)
    {
        __os.writeProxy(v);
    }

    public static DistributedSharedLockPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            DistributedSharedLockPrxHelper result = new DistributedSharedLockPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
