// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `IdGenerator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.yonyou.mcloud.idgenerator;

public final class IdGeneratorPrxHelper extends Ice.ObjectPrxHelperBase implements IdGeneratorPrx
{
    private static final String __nextId_name = "nextId";

    public String nextId()
    {
        return nextId(null, false);
    }

    public String nextId(java.util.Map<String, String> __ctx)
    {
        return nextId(__ctx, true);
    }

    private String nextId(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__nextId_name);
        return end_nextId(begin_nextId(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_nextId()
    {
        return begin_nextId(null, false, false, null);
    }

    public Ice.AsyncResult begin_nextId(java.util.Map<String, String> __ctx)
    {
        return begin_nextId(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_nextId(Ice.Callback __cb)
    {
        return begin_nextId(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_nextId(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_nextId(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_nextId(Callback_IdGenerator_nextId __cb)
    {
        return begin_nextId(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_nextId(java.util.Map<String, String> __ctx, Callback_IdGenerator_nextId __cb)
    {
        return begin_nextId(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_nextId(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_nextId(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_nextId(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_nextId(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_nextId(java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_nextId(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_nextId(java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_nextId(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_nextId(java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_nextId(__ctx, __explicitCtx, __synchronous, 
                            new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                {
                                    public final void __completed(Ice.AsyncResult __result)
                                    {
                                        IdGeneratorPrxHelper.__nextId_completed(this, __result);
                                    }
                                });
    }

    private Ice.AsyncResult begin_nextId(java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__nextId_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__nextId_name, __cb);
        try
        {
            __result.prepare(__nextId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_nextId(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __nextId_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __nextId_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.yonyou.mcloud.idgenerator.IdGeneratorPrx __proxy = (com.yonyou.mcloud.idgenerator.IdGeneratorPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_nextId(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __nextIdByModule_name = "nextIdByModule";

    public String nextIdByModule(String moduleCode)
    {
        return nextIdByModule(moduleCode, null, false);
    }

    public String nextIdByModule(String moduleCode, java.util.Map<String, String> __ctx)
    {
        return nextIdByModule(moduleCode, __ctx, true);
    }

    private String nextIdByModule(String moduleCode, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__nextIdByModule_name);
        return end_nextIdByModule(begin_nextIdByModule(moduleCode, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_nextIdByModule(String moduleCode)
    {
        return begin_nextIdByModule(moduleCode, null, false, false, null);
    }

    public Ice.AsyncResult begin_nextIdByModule(String moduleCode, java.util.Map<String, String> __ctx)
    {
        return begin_nextIdByModule(moduleCode, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_nextIdByModule(String moduleCode, Ice.Callback __cb)
    {
        return begin_nextIdByModule(moduleCode, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_nextIdByModule(String moduleCode, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_nextIdByModule(moduleCode, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_nextIdByModule(String moduleCode, Callback_IdGenerator_nextIdByModule __cb)
    {
        return begin_nextIdByModule(moduleCode, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_nextIdByModule(String moduleCode, java.util.Map<String, String> __ctx, Callback_IdGenerator_nextIdByModule __cb)
    {
        return begin_nextIdByModule(moduleCode, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_nextIdByModule(String moduleCode, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_nextIdByModule(moduleCode, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_nextIdByModule(String moduleCode, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_nextIdByModule(moduleCode, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_nextIdByModule(String moduleCode, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_nextIdByModule(moduleCode, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_nextIdByModule(String moduleCode, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_nextIdByModule(moduleCode, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_nextIdByModule(String moduleCode, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_nextIdByModule(moduleCode, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                IdGeneratorPrxHelper.__nextIdByModule_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_nextIdByModule(String moduleCode, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__nextIdByModule_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__nextIdByModule_name, __cb);
        try
        {
            __result.prepare(__nextIdByModule_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(moduleCode);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_nextIdByModule(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __nextIdByModule_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __nextIdByModule_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.yonyou.mcloud.idgenerator.IdGeneratorPrx __proxy = (com.yonyou.mcloud.idgenerator.IdGeneratorPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_nextIdByModule(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    public static IdGeneratorPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), IdGeneratorPrx.class, IdGeneratorPrxHelper.class);
    }

    public static IdGeneratorPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), IdGeneratorPrx.class, IdGeneratorPrxHelper.class);
    }

    public static IdGeneratorPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), IdGeneratorPrx.class, IdGeneratorPrxHelper.class);
    }

    public static IdGeneratorPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), IdGeneratorPrx.class, IdGeneratorPrxHelper.class);
    }

    public static IdGeneratorPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, IdGeneratorPrx.class, IdGeneratorPrxHelper.class);
    }

    public static IdGeneratorPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, IdGeneratorPrx.class, IdGeneratorPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::common::IdGenerator"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, IdGeneratorPrx v)
    {
        __os.writeProxy(v);
    }

    public static IdGeneratorPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            IdGeneratorPrxHelper result = new IdGeneratorPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
